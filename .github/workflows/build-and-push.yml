name: Build services

on:
  push:
    paths:
      - "CMakeLists.txt"
      - "codecov.yml"
      - ".github/workflows/**"
      - "build/**"
      - "src/**"
      - "tests/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  extract-service-tag:
    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
    outputs:
      version: ${{ steps.service-version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract git commit hash
        id: service-version
        # https://stackoverflow.com/questions/58886293/getting-current-branch-and-commit-hash-in-github-action
        run: echo "tag=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Install dependencies
        # https://stackoverflow.com/questions/34773745/debconf-unable-to-initialize-frontend-dialog
        run: |
          sudo apt-get update
          sudo apt list --installed
          sudo DEBIAN_FRONTEND="noninteractive" apt-get install \
            -y \
            --no-install-recommends \
            libx11-dev=2:1.8.7-1build1 \
            libgl-dev=1.7.0-1build1 \
            libasio-dev=1:1.28.1-0.2 \
            libeigen3-dev=3.4.0-4build0.1 \
            libpng-dev=1.6.43-5build1 \
      - name: Install libpqxx
        # See libpqxx section in the README
        run: |
          sudo apt-get install -y --no-install-recommends \
            libpq-dev
          cd /tmp
          git clone https://github.com/jtv/libpqxx.git
          cd libpqxx
          git checkout 7.9.0
          cmake .
          cmake --build . -j 8
          cmake --install .
      - uses: actions/checkout@v4
      - name: Build server
        run: |
          make tests
      # https://github.com/actions/upload-artifact/issues/38
      - name: Compress build folder
        run: |
          tar -cvf build-data.tar .
      - name: Upload build result
        uses: actions/upload-artifact@v4
        with:
          name: build-data
          path: build-data.tar

  unit-tests:
    runs-on: ubuntu-24.04
    needs: [build]
    steps:
      - name: Install lcov
        run: |
          sudo apt-get install -y lcov=2.0-4ubuntu2
      - name: Download build data
        uses: actions/download-artifact@v4
        with:
          name: build-data
      - name: Uncompress build data
        run: |
          tar -xvf build-data.tar
      - name: Run tests
        run: |
          ./sandbox/bin/unitTests
      - name: Aggregate code coverage
        # https://github.com/linux-test-project/lcov/issues/296
        # https://stackoverflow.com/questions/38438219/how-to-remove-certain-directories-from-lcov-code-coverage-report
        run: |
          lcov \
            --directory cmake-build \
            --exclude=*googletest* \
            --exclude=\/usr\/include\/* \
            --exclude=*tests\/* \
            --capture \
            --output-file coverage.info
      - name: Display coverage
        run: |
          lcov --list coverage.info
      - name: Upload coverage to Codecov
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          handle_no_reports_found: true
          files: ./coverage.info
          token: ${{ secrets.CODECOV_TOKEN }}

  integration-tests:
    runs-on: ubuntu-24.04
    needs: [build]
    steps:
      - name: Install lcov
        run: |
          sudo apt-get install -y lcov=2.0-4ubuntu2
      - name: Download build data
        uses: actions/download-artifact@v4
        with:
          name: build-data
      - name: Uncompress build data
        run: |
          tar -xvf build-data.tar
      - name: Run tests
        run: |
          ./sandbox/bin/integrationTests
      - name: Aggregate code coverage
        run: |
          lcov \
            --directory cmake-build \
            --exclude=*googletest* \
            --exclude=\/usr\/include\/* \
            --exclude=*tests\/* \
            --capture \
            --output-file coverage.info
      - name: Display coverage
        run: |
          lcov --list coverage.info
      - name: Upload coverage to Codecov
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          handle_no_reports_found: true
          files: ./coverage.info
          token: ${{ secrets.CODECOV_TOKEN }}
